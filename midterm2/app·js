/* =========================================================================
   Airline Passenger Satisfaction — Wide & Deep (TF.js)
   Small compatibility fixes: no optional chaining/nullish ops,
   resilient event wiring, safer file reading, visible error banner.
   ========================================================================= */

var S = {
  rawTrain: [], rawTest: [],
  map: null,
  xsWTr: null, xsDTr: null, ysTr: null,
  xsWVa: null, xsDVa: null, ysVa: null,
  model: null,
  valProbs: null, testProbs: null, testIDs: null,
  thresh: 0.5,
  isTraining: false
};

function $(id){ return document.getElementById(id); }

/* ---------- error surface ---------- */
function showErr(msg){
  try{
    var box = $('errBox');
    if(!box) return alert(msg);
    box.style.display = 'block';
    box.textContent = String(msg || 'Unknown error');
  }catch(e){ /* noop */ }
}
window.addEventListener('error', function(e){
  console.error(e?.error || e.message || e);
  showErr('JavaScript error: ' + (e.message || e.error || e));
});

/* ---------------- UI helpers ---------------- */
var TRAIN_BTNS = ['btnLoad','btnPre','btnBuild','btnSummary','btnTrain','btnStop','btnPredict','btnSub','btnProb','btnSaveModel'];
function setBusy(on){
  S.isTraining = !!on;
  for(var i=0;i<TRAIN_BTNS.length;i++){
    var el=$(TRAIN_BTNS[i]); if(!el) continue;
    if(TRAIN_BTNS[i]==='btnStop'){ el.disabled = !on; } else { el.disabled = !!on; }
  }
  var dot=$('trainDot'), txt=$('trainText');
  if(dot&&txt){ if(on){ dot.classList.add('busy'); txt.textContent='Training…'; } else { dot.classList.remove('busy'); txt.textContent='Idle'; } }
}
function appendLog(id, line){
  var el=$(id); if(!el) return;
  if(el.textContent==='—') el.textContent='';
  el.textContent += line;
  el.scrollTop = el.scrollHeight;
}

/* --------------- CSV parsing (Kaggle) --------------- */
function fileToText(file){
  return new Promise(function(resolve,reject){
    try{
      var r = new FileReader();
      r.onload = function(ev){
        var s = String(ev.target.result || '').replace(/^\uFEFF/,'');
        resolve(s);
      };
      r.onerror = function(e){ reject(e); };
      r.readAsText(file);
    }catch(e){ reject(e); }
  });
}
async function parseWithPapa(file, delimiter, quoteChar){
  if(!window.Papa){ throw new Error('PapaParse not loaded'); }
  var text = await fileToText(file);
  return new Promise(function(resolve, reject){
    Papa.parse(text, {
      header:true, dynamicTyping:true, skipEmptyLines:'greedy',
      delimiter: delimiter || ',', quoteChar: quoteChar || '"',
      complete: function(r){ resolve(r.data || []); },
      error: function(err){ reject(err); }
    });
  });
}
function normalizeRow(row){
  var out={};
  for(var k in row){
    if(!Object.prototype.hasOwnProperty.call(row,k)) continue;
    var v = row[k];
    if(v===''||v===undefined) out[k]=null;
    else if(typeof v==='string'){ var t=v.trim(); out[k]=t===''? null : t; }
    else out[k]=v;
  }
  return out;
}
function missingPct(rows){
  if(!rows.length) return 100;
  var cols=Object.keys(rows[0]); var miss=0, tot=rows.length*cols.length;
  for(var i=0;i<rows.length;i++){
    var r=rows[i];
    for(var j=0;j<cols.length;j++){
      var v=r[cols[j]];
      if(v==null||v==='') miss++;
    }
  }
  return +(100*miss/tot).toFixed(1);
}
function previewTable(rows, limit){
  limit = (typeof limit==='number'? limit : 8);
  var host=$('previewTable'); if(!host) return;
  if(!rows.length){ host.innerHTML=''; return; }
  var cols=Object.keys(rows[0]);
  var head='<thead><tr>'+cols.map(function(c){return '<th>'+c+'</th>';}).join('')+'</tr></thead>';
  var body='<tbody>'+rows.slice(0,limit).map(function(r){
    return '<tr>'+cols.map(function(c){ return '<td>'+(r[c]==null? '' : r[c])+'</td>'; }).join('')+'</tr>';
  }).join('')+'</tbody>';
  host.innerHTML = '<table>'+head+body+'</table>';
}

/* --------------- Column resolver --------------- */
function norm(s){ return (s||'').toLowerCase().replace(/[^a-z0-9]/g,''); }
var ALIAS = new Map(Object.entries({
  gender:'gender', sex:'gender',
  customertype:'customertype','customer_type':'customertype',
  typeoftravel:'typeoftravel','type_of_travel':'typeoftravel',
  'class':'class',
  satisfaction:'satisfaction','satisfied':'satisfaction',
  age:'age',
  flightdistance:'flightdistance','flight_distance':'flightdistance',
  inflightwifiservice:'inflightwifiservice','inflight_wifi_service':'inflightwifiservice','wifi':'inflightwifiservice',
  departurearrivaltimeconvenient:'timeconvenient','departuretimeconvenient':'timeconvenient','arrivaltimeconvenient':'timeconvenient',
  easeofonlinebooking:'easeonline','ease_online_booking':'easeonline',
  gatelocation:'gatelocation','gate_location':'gatelocation',
  foodanddrink:'fooddrink','food_drink':'fooddrink',
  onlineboarding:'onlineboarding','online_boarding':'onlineboarding',
  seatcomfort:'seatcomfort','seat_comfort':'seatcomfort',
  inflightentertainment:'inflightentertainment','inflight_entertainment':'inflightentertainment',
  onboardservice:'onboardservice','on_board_service':'onboardservice',
  legroomservice:'legroomservice','leg_room_service':'legroomservice',
  baggagehandling:'baggagehandling','baggage_handling':'baggagehandling',
  checkinservice:'checkinservice','check_in_service':'checkinservice',
  inflightservice:'inflightservice','inflight_service':'inflightservice',
  cleanliness:'cleanliness',
  departuredelayinminutes:'departuredelay','departuredelay':'departuredelay',
  arrivaldelayinminutes:'arrivaldelay','arrivaldelay':'arrivaldelay',
  id:'id', passengerid:'id'
}));
function unifyRow(row){
  var u={};
  for(var k in row){
    if(!Object.prototype.hasOwnProperty.call(row,k)) continue;
    var key = ALIAS.get(norm(k)) || null;
    if(key){ u[key]=row[k]; }
  }
  if(Object.prototype.hasOwnProperty.call(u,'satisfaction')){
    var val=u.satisfaction;
    if(typeof val==='string'){
      var t=val.toLowerCase();
      u.satisfaction = (t.indexOf('satisfied')>-1 && t.indexOf('neutral')===-1) ? 1 : 0;
    } else u.satisfaction = +val;
  }
  return u;
}

/* --------------- Stats --------------- */
function median(a){
  var b=[];
  for(var i=0;i<a.length;i++){ var x=a[i]; if(x!=null && !Number.isNaN(+x)) b.push(+x); }
  b.sort(function(x,y){return x-y;});
  if(!b.length) return null;
  var m=Math.floor(b.length/2); return b.length%2? b[m] : (b[m-1]+b[m])/2;
}
function mode(a){
  var m=new Map(); var best=null, c=0;
  for(var i=0;i<a.length;i++){ var v=a[i]; if(v==null) continue; var k=String(v); var n=(m.get(k)||0)+1; m.set(k,n); if(n>c){c=n; best=k;} }
  return best;
}
function mean(a){ var b=a.filter(Number.isFinite); return b.length? b.reduce(function(s,x){return s+x;},0)/b.length : 0; }
function sd(a){ var b=a.filter(Number.isFinite); if(b.length<2) return 0; var mu=mean(b); return Math.sqrt(b.reduce(function(s,x){return s+(x-mu)*(x-mu);},0)/(b.length-1)); }
function finite(x, d){ d = (typeof d==='number'? d : 0); return Number.isFinite(+x) ? +x : d; }

/* --------------- Preprocess mapping --------------- */
function buildMapping(trainRows){
  var useCase = $('useCase').value;
  var useCross = $('featCross').checked;
  var useTot   = $('featDelay').checked;

  var T = trainRows.map(unifyRow);

  var CAT_KEYS = ['gender','customertype','typeoftravel','class'];
  var NUM_KEYS_BASE = [
    'age','flightdistance','timeconvenient','easeonline','gatelocation','fooddrink','onlineboarding',
    'seatcomfort','inflightentertainment','onboardservice','legroomservice','baggagehandling',
    'checkinservice','inflightservice','cleanliness','departuredelay'
  ];
  var NUM_KEYS = NUM_KEYS_BASE.slice();
  if(useCase==='post') NUM_KEYS.push('arrivaldelay');

  var med = {}, mu={}, sig={};
  for(var i=0;i<NUM_KEYS.length;i++){
    var k=NUM_KEYS[i];
    var arr = T.map(function(r){ return finite(r[k], null); }).filter(function(v){ return v!=null; });
    var m = median(arr);
    med[k] = Number.isFinite(m) ? m : 0;
    var vals = T.map(function(r){ return finite(r[k], med[k]); });
    mu[k] = mean(vals); sig[k] = sd(vals) || 1;
  }
  var catVals = {};
  for(i=0;i<CAT_KEYS.length;i++){
    var ck = CAT_KEYS[i];
    var mv = mode(T.map(function(r){ return r[ck]==null? null : String(r[ck]); }));
    var uniq = Array.from(new Set(T.map(function(r){ return r[ck]==null ? mv : String(r[ck]); })))
                    .map(function(v){ return v==null? 'UNK' : String(v); });
    var set = new Set(uniq.concat(['UNK']));
    catVals[ck] = Array.from(set);
  }

  var crossVals = [];
  var crossKey = 'classXtypeoftravel';
  if(useCross){
    crossVals = Array.from(new Set(T.map(function(r){
      var c = (r['class'] != null ? r['class'] : 'UNK') + '|' + (r['typeoftravel'] != null ? r['typeoftravel'] : 'UNK');
      return String(c);
    })));
    if(crossVals.indexOf('UNK|UNK')===-1) crossVals.push('UNK|UNK');
  }

  var DEEP_NUM = NUM_KEYS.slice();
  if(useTot){ DEEP_NUM.push('totaldelay'); }

  var WIDE_SPEC = { cats: CAT_KEYS.slice(), cross:{enabled:useCross, key:crossKey, values:crossVals} };
  var DEEP_SPEC = { nums:DEEP_NUM, includeCats:false, cats:CAT_KEYS.slice() };
  var idKey = 'id';

  return { useCase:useCase, useCross:useCross, useTot:useTot, med:med, mu:mu, sig:sig, catVals:catVals, WIDE_SPEC:WIDE_SPEC, DEEP_SPEC:DEEP_SPEC, idKey:idKey };
}

function imputeAndVec(rows, M){
  var Xw=[], Xd=[], Y=[], IDS=[];
  for(var i=0;i<rows.length;i++){
    var r0 = unifyRow(rows[i]);
    var rc = {};
    for(var k in r0){ rc[k]=r0[k]; }

    for(var ck in M.catVals){
      var vals=M.catVals[ck];
      var v = rc[ck];
      rc[ck] = (v==null) ? vals[0] : String(v);
      if(vals.indexOf(rc[ck])===-1) rc[ck]='UNK';
    }
    for(var j=0;j<M.DEEP_SPEC.nums.length;j++){
      var nk=M.DEEP_SPEC.nums[j];
      if(nk==='totaldelay') continue;
      var raw=rc[nk];
      var val=finite(raw, null);
      rc[nk] = (val==null) ? M.med[nk] : val;
    }
    if(M.useTot){
      var dep = finite(rc['departuredelay'], M.med['departuredelay']);
      var arr = (M.useCase==='post') ? finite(rc['arrivaldelay'], M.med['arrivaldelay']) : 0;
      rc['totaldelay'] = dep + arr;
    }

    var w=[];
    for(j=0;j<M.WIDE_SPEC.cats.length;j++){
      var catKey=M.WIDE_SPEC.cats[j];
      var cats=M.catVals[catKey];
      for(var c=0;c<cats.length;c++){ w.push(rc[catKey]===cats[c] ? 1 : 0); }
    }
    if(M.WIDE_SPEC.cross.enabled){
      var key = (rc['class']!=null?rc['class']:'UNK') + '|' + (rc['typeoftravel']!=null?rc['typeoftravel']:'UNK');
      var cats2 = M.WIDE_SPEC.cross.values;
      for(c=0;c<cats2.length;c++){ w.push(key===cats2[c] ? 1 : 0); }
    }

    var d=[];
    for(j=0;j<M.DEEP_SPEC.nums.length;j++){
      var nk2=M.DEEP_SPEC.nums[j];
      var val2 = finite(rc[nk2], (M.med[nk2] != null ? M.med[nk2] : 0));
      var z = (val2 - (M.mu[nk2] != null ? M.mu[nk2] : 0)) / ((M.sig[nk2] || 1));
      d.push(Number.isFinite(z)? z : 0);
    }

    Xw.push(w); Xd.push(d);
    if(Object.prototype.hasOwnProperty.call(rc,'satisfaction')) Y.push(+rc.satisfaction);
    var id = (Object.prototype.hasOwnProperty.call(r0,'id')) ? r0['id'] : (i+1);
    IDS.push(id);
  }
  return { Xwide:Xw, Xdeep:Xd, y: Y.length? Y : null, ids: IDS };
}

/* --------------- Split --------------- */
function stratifiedSplitRows(rows, rate){
  rate = (typeof rate==='number'? rate : 0.2);
  var U = rows.map(unifyRow).map(function(r,idx){
    var base = {};
    for(var k in rows[idx]){ base[k]=rows[idx][k]; }
    base.__y = +r.satisfaction;
    return base;
  });
  var z = U.filter(function(r){return r.__y===0;}), o=U.filter(function(r){return r.__y===1;});
  function split(arr){
    var a=arr.slice(); tf.util.shuffle(a);
    var n=Math.max(1, Math.floor(a.length*rate));
    return {val:a.slice(0,n), tr:a.slice(n)};
  }
  var A=split(z), B=split(o);
  var train=A.tr.concat(B.tr), val=A.val.concat(B.val);
  tf.util.shuffle(train); tf.util.shuffle(val);
  for(var i=0;i<train.length;i++){ delete train[i].__y; }
  for(i=0;i<val.length;i++){ delete val[i].__y; }
  return { train:train, val:val };
}

/* --------------- Model --------------- */
function buildWideDeep(wideLen, deepLen){
  var wideIn = tf.input({shape:[wideLen], name:'wide'});
  var deepIn = tf.input({shape:[deepLen], name:'deep'});

  var wideLogit = tf.layers.dense({units:1, useBias:false, activation:'linear', name:'wide_logit'}).apply(wideIn);

  var x = tf.layers.dense({units:32, activation:'relu'}).apply(deepIn);
  x = tf.layers.dropout({rate:0.1}).apply(x);
  x = tf.layers.dense({units:8, activation:'relu'}).apply(x);
  var deepLogit = tf.layers.dense({units:1, activation:'linear', name:'deep_logit'}).apply(x);

  var sum = tf.layers.add().apply([wideLogit, deepLogit]);
  var out = tf.layers.activation({activation:'sigmoid', name:'out'}).apply(sum);

  var model = tf.model({inputs:[wideIn, deepIn], outputs:out, name:'wide_deep'});
  model.compile({optimizer:'adam', loss:'binaryCrossentropy', metrics:['accuracy']});
  return model;
}
function modelSummaryText(m){ var lines=[]; m.summary(undefined, undefined, function(s){lines.push(s);}); return lines.join('\n'); }

/* --------------- Metrics --------------- */
function rocPoints(yTrue, yProb, steps){
  steps = steps || 200;
  var T=[]; for(var i=0;i<=steps;i++) T.push(i/steps);
  var pts=T.map(function(th){
    var TP=0,FP=0,TN=0,FN=0;
    for(var i=0;i<yTrue.length;i++){
      var y=yTrue[i], p=yProb[i]>=th?1:0;
      if(y===1&&p===1)TP++; else if(y===0&&p===1)FP++; else if(y===0&&p===0)TN++; else FN++;
    }
    var TPR=TP/(TP+FN||1), FPR=FP/(FP+TN||1);
    return {x:FPR,y:TPR,th:th};
  });
  var s=pts.slice().sort(function(a,b){return a.x-b.x;});
  var auc=0; for(i=1;i<s.length;i++){ var a=s[i-1], b=s[i]; auc += (b.x-a.x)*(a.y+b.y)/2; }
  return {points:s, auc:auc};
}
function drawROC(canvas, pts){
  var ctx=canvas.getContext('2d'); var W=canvas.width, H=canvas.height;
  ctx.clearRect(0,0,W,H); ctx.fillStyle='#0f1628'; ctx.fillRect(0,0,W,H);
  ctx.strokeStyle='#233350'; ctx.lineWidth=1;
  for(var i=0;i<=5;i++){var x=i/5; ctx.beginPath(); ctx.moveTo(40+x*(W-60), H-30); ctx.lineTo(40+x*(W-60), 20); ctx.stroke();}
  for(i=0;i<=5;i++){var y=i/5; ctx.beginPath(); ctx.moveTo(40, 20+y*(H-50)); ctx.lineTo(W-20, 20+y*(H-50)); ctx.stroke();}
  ctx.strokeStyle='#8aa3ff'; ctx.lineWidth=2; ctx.beginPath();
  pts.forEach(function(p,i){ var x=40+p.x*(W-60), y=H-30-p.y*(H-50); if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y); });
  ctx.stroke();
}
function confusionStats(yTrue, yProb, th){
  var TP=0,FP=0,TN=0,FN=0;
  for(var i=0;i<yTrue.length;i++){
    var y=yTrue[i], p=yProb[i]>=th?1:0;
    if(y===1&&p===1)TP++; else if(y===0&&p===1)FP++; else if(y===0&&p===0)TN++; else FN++;
  }
  var prec=TP/(TP+FP||1), rec=TP/(TP+FN||1), f1=(2*prec*rec)/((prec+rec)||1);
  return {TP:TP,FP:FP,TN:TN,FN:FN,prec:prec,rec:rec,f1:f1};
}

/* --------------- Early stop --------------- */
var stopFlag=false;
function earlyStopWithRestore(patience, monitor){
  patience = (typeof patience==='number'? patience : 3);
  monitor = monitor || 'val_loss';
  var best=Infinity, wait=0, snap=null;
  return new tf.CustomCallback({
    onBatchEnd: async function(){ await new Promise(function(r){return setTimeout(r,0);}); },
    onEpochEnd: async function(_e, logs){
      await tf.nextFrame();
      var cur=logs && logs[monitor];
      if(cur!=null){
        if(cur<best-1e-12){
          best=cur; wait=0;
          if(snap) snap.forEach(function(t){return t.dispose();});
          snap = S.model.getWeights().map(function(w){return w.clone();});
        }else if(++wait>=patience){
          if(snap){ S.model.setWeights(snap); snap=null; }
          S.model.stopTraining=true;
        }
      }
      if(stopFlag) S.model.stopTraining=true;
    }
  });
}

/* --------------- Sanity checks --------------- */
function ensureReadyForTraining(){
  if(!(S.xsWTr && S.xsDTr && S.ysTr && S.xsWVa && S.xsDVa && S.ysVa)) {
    throw new Error('Tensors not built. Run “Run Preprocessing” again.');
  }
  var nTr = S.xsWTr.shape[0];
  if(nTr===0) throw new Error('No training rows after preprocessing.');
  if(S.xsWTr.shape[0]!==S.xsDTr.shape[0] || S.xsWTr.shape[0]!==S.ysTr.shape[0]) {
    throw new Error('Train shape mismatch: wide='+S.xsWTr.shape+' deep='+S.xsDTr.shape+' y='+S.ysTr.shape);
  }
  if(S.xsWVa.shape[0]!==S.xsDVa.shape[0] || S.xsWVa.shape[0]!==S.ysVa.shape[0]) {
    throw new Error('Val shape mismatch: wide='+S.xsWVa.shape+' deep='+S.xsDVa.shape+' y='+S.ysVa.shape);
  }
  if(S.xsWTr.shape[1]===0 || S.xsDTr.shape[1]===0){
    throw new Error('Feature vectors are empty (0 columns). Check categorical mapping.');
  }
}

/* --------------- Handlers --------------- */
async function onLoad(){
  try{
    $('errBox').style.display='none';
    var tfEl = $('trainFile'), txEl=$('testFile');
    var fT = tfEl && tfEl.files && tfEl.files[0];
    var fX = txEl && txEl.files && txEl.files[0];
    if(!fT){ alert('Please choose train.csv'); return; }

    var rawTrain = (await parseWithPapa(fT, ',', '"')).map(normalizeRow);
    var rawTest  = fX ? (await parseWithPapa(fX, ',', '"')).map(normalizeRow) : [];

    S.rawTrain = rawTrain; S.rawTest = rawTest;

    $('kTrain').textContent = rawTrain.length;
    $('kTest').textContent  = (rawTest.length ? String(rawTest.length) : '—');
    $('kMiss').textContent  = missingPct(rawTrain) + '%';
    $('fixNote').textContent= '—';
    previewTable(rawTrain);
  }catch(e){ console.error(e); showErr('Load failed: '+(e && e.message ? e.message : e)); }
}
function onPreprocess(){
  try{
    if(!S.rawTrain.length){ alert('Load train.csv first'); return; }
    S.map = buildMapping(S.rawTrain);

    var split = stratifiedSplitRows(S.rawTrain, 0.2);
    var TV = imputeAndVec(split.train, S.map);
    var VV = imputeAndVec(split.val,   S.map);

    S.xsWTr = tf.tensor2d(TV.Xwide, [TV.Xwide.length, TV.Xwide[0].length], 'float32');
    S.xsDTr = tf.tensor2d(TV.Xdeep, [TV.Xdeep.length, TV.Xdeep[0].length], 'float32');
    S.ysTr  = tf.tensor2d(TV.y, [TV.y.length, 1], 'float32');

    S.xsWVa = tf.tensor2d(VV.Xwide, [VV.Xwide.length, VV.Xwide[0].length], 'float32');
    S.xsDVa = tf.tensor2d(VV.Xdeep, [VV.Xdeep.length, VV.Xdeep[0].length], 'float32');
    S.ysVa  = tf.tensor2d(VV.y, [VV.y.length, 1], 'float32');

    $('preInfo').textContent = [
      'Use case: ' + (S.map.useCase==='pre'?'Pre-flight (ArrivalDelay excluded)':'Post-flight (ArrivalDelay included)'),
      'Wide len: ' + S.xsWTr.shape[1] + ' | Deep len: ' + S.xsDTr.shape[1],
      'Train: wide ' + S.xsWTr.shape + ' / deep ' + S.xsDTr.shape + ' | Val: wide ' + S.xsWVa.shape + ' / deep ' + S.xsDVa.shape,
      'Impute: medians for numerics; modes for categoricals',
      'Engineered: Cross=' + S.map.useCross + ', TotalDelay=' + S.map.useTot
    ].join('\n');
  }catch(e){ console.error(e); showErr('Preprocessing failed: '+(e && e.message ? e.message : e)); }
}
function onBuild(){
  try{
    if(!S.xsWTr){ alert('Run Preprocessing first'); return; }
    S.model = buildWideDeep(S.xsWTr.shape[1], S.xsDTr.shape[1]);
    $('modelSummary').textContent = 'Model built. Click “Show Summary”.';
  }catch(e){ console.error(e); showErr('Build failed: '+(e && e.message ? e.message : e)); }
}
function onSummary(){
  try{
    if(!S.model){ alert('Build model first'); return; }
    $('modelSummary').textContent = modelSummaryText(S.model);
  }catch(e){ console.error(e); showErr('Summary failed: '+(e && e.message ? e.message : e)); }
}

async function onTrain(){
  try{
    if(!S.model){ alert('Build the model first'); return; }
    if(S.isTraining){ alert('Training is already running. Please wait or click Early Stop.'); return; }

    ensureReadyForTraining();
    setBusy(true); stopFlag=false;
    $('trainLog').textContent = 'epoch 0: starting…\n';
    appendLog('trainLog', 'Train shapes: wide '+S.xsWTr.shape+', deep '+S.xsDTr.shape+', y '+S.ysTr.shape+'\n');
    appendLog('trainLog', 'Val shapes:   wide '+S.xsWVa.shape+', deep '+S.xsDVa.shape+', y '+S.ysVa.shape+'\n');

    var cb = earlyStopWithRestore(3,'val_loss');
    await S.model.fit(
      [S.xsWTr, S.xsDTr], S.ysTr,
      {
        epochs: 25,
        batchSize: 64,
        validationData: [[S.xsWVa, S.xsDVa], S.ysVa],
        callbacks: [{
          onEpochEnd: async function(ep, logs){
            appendLog('trainLog', 'epoch '+(ep+1)+': loss='+logs.loss.toFixed(4)+' val_loss='+logs.val_loss.toFixed(4)+' acc='+( (logs.acc||logs.accuracy||0).toFixed(4) )+'\n');
            if(cb.onEpochEnd) await cb.onEpochEnd(ep, logs);
          },
          onBatchEnd: async function(b, logs){ if(cb.onBatchEnd) await cb.onBatchEnd(b, logs); }
        }]
      }
    );

    var valProbs = tf.tidy(function(){ return S.model.predict([S.xsWVa, S.xsDVa]).dataSync(); });
    S.valProbs = Float32Array.from(valProbs);
    var yTrue = Array.from(S.ysVa.dataSync()).map(function(v){return +v;});
    var rp = rocPoints(yTrue, S.valProbs, 200);
    drawROC($('rocCanvas'), rp.points);
    $('aucText').textContent = rp.auc.toFixed(4);
    updateThreshold(S.thresh);
  }catch(e){
    console.error(e);
    showErr('Training failed: ' + (e && e.message ? e.message : e));
  } finally {
    setBusy(false);
  }
}
function onStop(){ if(S.isTraining){ stopFlag=true; appendLog('trainLog', 'Early stop requested…\n'); } }

/* --------------- Threshold --------------- */
function updateThreshold(th){
  $('thVal').textContent=(+th).toFixed(2);
  if(S.valProbs==null) return;
  var yTrue=Array.from(S.ysVa.dataSync()).map(function(v){return +v;});
  var st=confusionStats(yTrue,S.valProbs,+th);
  $('cmTP').textContent=st.TP; $('cmFN').textContent=st.FN;
  $('cmFP').textContent=st.FP; $('cmTN').textContent=st.TN;
  $('prf').textContent='Precision: '+(st.prec*100).toFixed(2)+'%\nRecall: '+(st.rec*100).toFixed(2)+'%\nF1: '+st.f1.toFixed(4);
  S.thresh=+th;
}

/* --------------- Predict & Export --------------- */
function onPredict(){
  try{
    if(!S.model){ alert('Train the model first'); return; }
    if(!S.rawTest.length){ alert('Load test.csv'); return; }

    var V = imputeAndVec(S.rawTest, S.map);
    var xsW = tf.tensor2d(V.Xwide, [V.Xwide.length, V.Xwide[0].length], 'float32');
    var xsD = tf.tensor2d(V.Xdeep, [V.Xdeep.length, V.Xdeep[0].length], 'float32');
    var probs = tf.tidy(function(){ return S.model.predict([xsW, xsD]).dataSync(); });
    xsW.dispose(); xsD.dispose();

    S.testProbs = Float32Array.from(probs);
    S.testIDs   = V.ids;
    $('predInfo').textContent = 'Predicted '+S.testProbs.length+' rows. Ready to download.';
  }catch(e){ console.error(e); showErr('Prediction failed: '+(e && e.message ? e.message : e)); }
}
function downloadCSV(name, rows){
  if(!rows.length) return;
  var cols=Object.keys(rows[0]);
  function esc(v){ if(v==null) return ''; var s=String(v); return /[",\n]/.test(s)? '"'+s.replace(/"/g,'""')+'"' : s; }
  var csv=[cols.join(',')].concat(rows.map(function(r){return cols.map(function(c){return esc(r[c]);}).join(',');})).join('\n');
  var blob=new Blob([csv],{type:'text/csv;charset=utf-8;'}); var url=URL.createObjectURL(blob);
  var a=document.createElement('a'); a.href=url; a.download=name; a.click(); URL.revokeObjectURL(url);
}
function onDownloadSubmission(){
  try{
    if(S.testProbs==null){ alert('Run Predict first'); return; }
    var out = S.testIDs.map(function(id,i){return { id:id, satisfaction: (S.testProbs[i]>=S.thresh? 1 : 0) };});
    downloadCSV('submission.csv', out);
  }catch(e){ console.error(e); showErr('Download failed: '+(e && e.message ? e.message : e)); }
}
function onDownloadProbs(){
  try{
    if(S.testProbs==null){ alert('Run Predict first'); return; }
    var out = S.testIDs.map(function(id,i){return { id:id, prob_satisfied: S.testProbs[i] };});
    downloadCSV('probabilities.csv', out);
  }catch(e){ console.error(e); showErr('Download failed: '+(e && e.message ? e.message : e)); }
}
async function onSaveModel(){
  try{
    if(!S.model){ alert('Train the model first'); return; }
    await S.model.save('downloads://airline_wide_deep_tfjs');
  }catch(e){ console.error(e); showErr('Save failed: '+(e && e.message ? e.message : e)); }
}

/* --------------- Wire-up (resilient) --------------- */
function wire(){
  var map = {
    btnLoad: onLoad, btnPre: onPreprocess, btnBuild: onBuild, btnSummary: onSummary,
    btnTrain: onTrain, btnStop: onStop, btnPredict: onPredict,
    btnSub: onDownloadSubmission, btnProb: onDownloadProbs, btnSaveModel: onSaveModel
  };
  for(var id in map){
    var el=$(id);
    if(el){ el.addEventListener('click', map[id]); }
  }
  var sl=$('thSlider'); if(sl){ sl.addEventListener('input', function(e){ updateThreshold(+e.target.value); }); }
  console.log('UI wired');
}
if(document.readyState==='loading'){
  document.addEventListener('DOMContentLoaded', wire);
}else{
  wire();
}
